typedef Patch {
  byte client;
  byte value;
}

typedef Client {
  byte id;
  chan queue = [25] of { Patch };
  byte model = 0;
  byte patches [5];
  byte layers  [5];
}

typedef Server {
  chan queue = [25] of { Patch };
  byte model = 0;
  byte layers [25];
}

proctype do_server (Server server) {
  byte patch
  do
  :: server.queue ? patch ->

  od
}

proctype do_client (Client client) {
  byte patch;
}

init {
  atomic {
    Server server;
    run do_server (server);
  }
  byte id    = 1;
  byte value = 1;
  do
  :: id < 3 ->
     atomic {
       Client client;
       client.id          = id;
       client.layers  [0] = 0;
       client.layers  [1] = 0;
       client.layers  [2] = 0;
       client.layers  [3] = 0;
       client.layers  [4] = 0;
       client.patches [0] = value+0;
       client.patches [1] = value+1;
       client.patches [2] = value+2;
       client.patches [3] = value+3;
       client.patches [4] = value+4;
       run do_client (client);
       id    = id    + 1;
       value = value + 5;
     }
  :: id >= 3 -> break;
  od
}
